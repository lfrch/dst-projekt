---
title: "Firmeninterne Arbeitsproduktivität "
subtitle: "Chancen hinsichtlich des Arbeitsmodus auf der Grundlage von VIsionaryZ Firmendaten"
author: "Lea Frech"
execute: 
    eval: true
lang: de
format: 
    revealjs:
            embed-resources: true
            toc: true
            toc-depth: 2
            toc-title: Agenda
            toc-expand: 1
            code-copy: true
            code-line-numbers: true
            scrollable: true
            incremental: true
            slide-number: c
            transition: slide
            theme: [default,style.scss]
---

## VIsionaryZ - Fakten & Status Quo

**5 Jahre Firmenstandort in Deutschland.**

- Kollegen im HQ in UK stellen derzeit Überlegungen zur Anpassungen des Arbeitsmodus an die 4-Tages-Woche an
- Seit Eröffnung des zweiten Standorts in Deutschland, gilt es interne Daten zu beleuchten und - auch vergleichend zu den Kollegen in UK, Verbesserungen vorzunehmen
- **Ausblick: Wo stehen wir aktuell?**

## Exkurs: Anzahl Arbeitsstunden je Geschäftsjahr
Die Arbeitsproduktivität wird in folgendem an der jährlich Anzahl der gearbeiteten Stunden gemessen.

:::: {.columns}

::: {.column width="60%"}
- aktuelle **5-Tages-Arbeitswoche**: 40h Arbeitszeit pro Woche
- ein Geschäftsjahr bringt **52 Arbeitswochen**, also **210 Werktage** exkl. Feiertage und individuellem Urlaubsanspruch
:::

::: {.column width="40%"}
- Vollzeitbeschäftigte kommen damit also auf **ca. 1.680h pro Jahr**

:::

::::



## {.unlisted}

<div style="font-size:36pt">
**Gerarbeitete Stunden im Zeitraum von:**<text style="color:#003f5c"> **2019**</text> - <text style="color:#ff6361">**2022**</text>
<br>
</div>

```{python}
import pandas as pd
import altair as alt

```

```{python}
#Color Scale
colors = alt.Scale(
    range=['#003f5c','#58508d','#bc5090','#ff6361','#ffa600']
)
```

```{python}
# Import Data for Hours Worked
LINK1 = '/Users/Lea/Desktop/dst-projekt/df_selectedlocations.csv'
df_selectedlocations = pd.read_csv(LINK1)
```

:::: {.columns}

::: {.column width="60%"}

```{python}
#Barchart

barchart1 = alt.Chart(df_selectedlocations).mark_bar().encode(
    x=alt.X('VALUE', scale=alt.Scale(bins=[0,1000,2000,3000,4000,5000,6000,7000])).axis(
        title='Hours',
        titleAnchor='start',
        grid=False,
        labelColor='black',
        tickColor='grey'),
    y=alt.Y('LOCATION').axis(
        title='Location',
        titleAnchor='middle',
        titleAngle=-90,
        labelAngle= 0,
        grid=False,
        labelColor='black',
        tickColor='black'),
    color=alt.Color('TIME:O', scale=colors),
).properties(
    width=400,
    height=400,
    title=alt.Title(
        "Hours worked",
    )
)

barchart1_labels = alt.Chart(df_selectedlocations).mark_text(baseline='middle', color='black').encode(
    x=alt.X('VALUE'),
    y=alt.Y('LOCATION')  
)



barchart1_final = alt.layer(barchart1,barchart1_labels).configure_view(
    strokeWidth=0
).configure_title(
    fontSize=20,
    anchor='middle',
    fontWeight='bold',
).configure_axis(
    labelFontSize = 11,
    labelFontWeight='bold',
    titleFontSize = 12,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 12
)

barchart1_final

```

:::

::: {.column width="40%"}
<text style="font-size:20pt">Im Verhältnis stehen unsere beiden Firmenstandorte mit der OECD^[Organisation für wirtschaftliche Zusammenarbeit und Entwicklung], ein zur Gesamtheit der Länder repräsentativer Zusammenschluss und der EU</text>

:::

::::

## {.unlisted}
<div style="font-size:36pt">
<text>**2020: wirtschaftlicher Tiefpunkt**</text>
<br>
</div>


```{python}

colors_linechart1 = alt.Scale(
    range=['#ffa600','#ff6361','grey','grey']
)

#Linechart
linechart1 = alt.Chart(df_selectedlocations).mark_line().encode(
    x=alt.X('TIME:O', title='Year').axis(
        titleAnchor='start',
        labelAngle= -0,
        ),
    y=alt.Y('VALUE').scale(domain=(1000,2000), bins=(1000,1300,1600,1900,2100)).axis(
        title='Hours',
        titleAnchor='end',
        grid= False,
        ),
    strokeWidth=alt.value(4), 
    color=alt.Color('LOCATION', scale=colors_linechart1),
    tooltip=['LOCATION']
)

# Chart 1 - Labels
location_list = df_selectedlocations['LOCATION'].tolist()

linechart_labels = alt.Chart(df_selectedlocations).mark_text(align='left', dx=5, fontSize=14).encode(
    alt.X('TIME:O', aggregate='max'),
    alt.Y('VALUE:Q', aggregate={'argmax': 'VALUE'}),
    alt.Text('LOCATION'),
    alt.Color('LOCATION:N', legend=None, scale=alt.Scale(domain=location_list,type='ordinal')), 
).properties(
    width=800,
    height=500,    
)

# Markers
linechart_points = alt.Chart(df_selectedlocations).mark_point(size=70, filled=True, opacity=1).encode(
    x=alt.X('TIME:O'),
    y=alt.Y('VALUE'),
    color=alt.Color('LOCATION', scale=colors_linechart1),
    tooltip=['LOCATION']
)

#Data Labels 
linechart_datalabels = alt.Chart(df_selectedlocations[(df_selectedlocations['LOCATION'].isin(['United Kingdom', 'Germany'])) & (df_selectedlocations['TIME'] == 2020)]).mark_text(
    align='left',
    dx=5,
    dy=10,
    fontSize=14,
).encode(
    x=alt.X('TIME:O'),
    y=alt.Y('VALUE'),
    text= ('VALUE'),
    color=alt.Color('LOCATION', scale=colors_linechart1)
)

# Chart 1 - Final Viz
linechart1_final = alt.layer(linechart1, linechart_labels,linechart_points, linechart_datalabels).configure_view(
    strokeWidth=0
).configure_title(
    fontSize=25,
    anchor='start',
    fontWeight='bold',
).configure_axis(
    labelFontSize = 11,
    titleFontSize = 12,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 12
)

linechart1_final

```


## {.unlisted}
<div style="font-size:36pt">
<text>**2022: Anstieg der Arbeitsstunden**</text>
<br>
</div>

```{python}
#Linechart
linechart1 = alt.Chart(df_selectedlocations).mark_line().encode(
    x=alt.X('TIME:O', title='Year').axis(
        titleAnchor='start',
        labelAngle= -0,
        ),
    y=alt.Y('VALUE').scale(domain=(1000,2000), bins=(1000,1300,1600,1900,2100)).axis(
        title='Hours',
        titleAnchor='end',
        grid= False,
        ),
    strokeWidth=alt.value(4), 
    color=alt.Color('LOCATION', scale=colors_linechart1),
    tooltip=['LOCATION']
)

# Chart 1 - Labels
location_list = df_selectedlocations['LOCATION'].tolist()

linechart_labels = alt.Chart(df_selectedlocations).mark_text(align='left', dx=5, fontSize=14).encode(
    alt.X('TIME:O', aggregate='max'),
    alt.Y('VALUE:Q', aggregate={'argmax': 'VALUE'}),
    alt.Text('LOCATION'),
    alt.Color('LOCATION:N', legend=None, scale=alt.Scale(domain=location_list,type='ordinal')), 
).properties(
    width=800,
    height=500,    
)

# Markers
linechart_points = alt.Chart(df_selectedlocations).mark_point(size=70, filled=True, opacity=1).encode(
    x=alt.X('TIME:O'),
    y=alt.Y('VALUE'),
    color=alt.Color('LOCATION', scale=colors_linechart1),
    tooltip=['LOCATION']
)

#Data Labels 
linechart_datalabels = alt.Chart(df_selectedlocations[(df_selectedlocations['LOCATION'].isin(['United Kingdom', 'Germany'])) & (df_selectedlocations['TIME'] == 2022)]).mark_text(
    align='left',
    dx=-8,
    dy=20,
    fontSize=14,
).encode(
    x=alt.X('TIME:O'),
    y=alt.Y('VALUE'),
    text= ('VALUE'),
    color=alt.Color('LOCATION', scale=colors_linechart1)
)



# Chart 1 - Final Viz
linechart2_final = alt.layer(linechart1, linechart_labels,linechart_points, linechart_datalabels).configure_view(
    strokeWidth=0
).configure_title(
    fontSize=25,
    anchor='start',
    fontWeight='bold',
).configure_axis(
    labelFontSize = 11,
    titleFontSize = 12,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 12
)

linechart2_final

```


<text style="font-size:15pt">*Anzahl der Stunden bilden u.a. auch die der Teilzeitbeschäftigten ab + abzgl. individuelle Ausfälle aufgrund von Krankheit o.ä*</text>

## Die innere Perspektive

<br>

:::: {.columns}

:::{.column width=60%}

```{python}
# Import Data for Hours Worked
LINK2 = '/Users/Lea/Desktop/dst-projekt/df2_selectedlocations.csv'
df2_selectedlocations = pd.read_csv(LINK2)
```

```{python}
# Code Scale for Exit Poverty
colors2 = alt.Scale(
    range=['#003f5c','#bc5090']
)

boxplot = alt.Chart(df2_selectedlocations).mark_boxplot(size=50, extent=0.5).encode(
    x=alt.X('SUBJECT').axis(
        title=None,
        labelAngle=0,
        grid=False,
        labelColor='black',
        tickColor='grey'),
    y=alt.Y('VALUE:Q', scale=alt.Scale(bins=[0,2,4,6,8,10,12,14,16,18],domain=(0,20))).axis(
        titleAnchor='start',
        grid=False,
        labelColor='black',
        tickColor='black'),
    color=alt.Color('SUBJECT', scale=colors2, legend=None),
).properties(
    width=500,
    height=450,
    title=alt.Title(
        "Hours needed to exit poverty",
        subtitle="in relation to family status",
    )
)

boxplot_final = alt.layer(boxplot).configure_view(
    strokeWidth=0
).configure_title(
    fontSize=20,
    anchor='middle',
    fontWeight='bold',
).configure_axis(
    labelFontSize = 11,
    labelFontWeight='bold',
    titleFontSize = 12,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 12
)

boxplot_final


```

:::

:::{.column width=40%}
<div style="font-size:25pt">
<text style="color:#003f5c">10,6 Stunden,d.h. weniger als **600 Stunden p.a.**</text><br><br>
<text style="color:#bc5090">12,6 Stunden, d.h. weniger als **700 Stunden p.a.**</text>
</div>

:::

::::

## Zusammenhang im Firmenkontext
<br>

:::: {.columns}

:::{.column width=60%}

```{python}
# Pfad zum df angeben
merged_df = pd.read_csv("/Users/Lea/Desktop/dst-projekt/merged_df.csv")

color_scale = alt.Scale(domain=['2 CHILDREN', 'NO CHILDREN'],
                        range=['#003f5c','#bc5090'])

#Scatterplot Code 

scatterplot_base = alt.Chart(merged_df).mark_circle(filled=True, size=100).encode(
    x=alt.X('Hours_needed:Q').axis(
        titleAnchor='start',
        grid=False),
    y=alt.Y('Hours_worked:Q').scale(bins=[0,500,1000,1500,2000],domain=[0,2000]).axis(
        grid=False),
    color=alt.Color('SUBJECT1', scale=color_scale, legend=None),
    tooltip=['SUBJECT1','Hours_needed','Hours_worked']
).properties(
    width=500,
    height=450
)

scatterplot_final = alt.layer(scatterplot_base).configure_view(
    strokeWidth=0
).configure_axis(
    labelFontSize = 11,
    titleFontSize = 12,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 12
)

scatterplot_final

```

:::

::: {.column width=40%}

<div style="font-size: 20pt">
- Gesundes Verhältnis zwischen den jährlich benötigten Stunden und der tatsächlich geleisteten Arbeitsstunden
- Bestätigt den aktuellen Arbeitsmodus
- Beschäftige <text style="color:#003f5c">**mit zwei Kindern**</text><text> und</text><text style="color:#bc5090"> **ohne Kind**</text><text> bei durchschnittlichen Lohn in unserem Unternehmen gut da stehen.</text>
</div>

:::

::::


## Ein Blick in die Zukunft

<text style="color:grey">Entwicklung des Bruttoinlandprodukts als Maß zur Arbeitsproduktivität</text>

. . .

```{python}
#Import Datasets
LINK3 = '/Users/Lea/Desktop/dst-projekt/df3_selectedlocations.csv'
df3_selectedlocations = pd.read_csv(LINK3)

LINK4 = '/Users/Lea/Desktop/dst-projekt/europe_forecast.csv'
europe = pd.read_csv(LINK4)

#Linechart

europe_linechart = alt.Chart(europe).mark_line(strokeDash=[5, 5]).encode(
    x=alt.X('TIME:O', title='Year').axis(
        titleAnchor='start',
        labelAngle= -0,
        ),
    y=alt.Y('VALUE').scale(domain=(0.85,1.08)).axis(
        title='GDP per hour worked',
        titleAnchor='end',
        grid= False,
        ),
    strokeWidth=alt.value(3),
    color=alt.value('grey'),
)

europe_list = europe['LOCATION'].tolist()

europe_line_labels = alt.Chart(europe).mark_text(align='left', dx=3).encode(
    alt.X('TIME:O', aggregate='max'),
    alt.Y('VALUE:Q', aggregate={'argmax': 'VALUE'}),
    alt.Text('LOCATION:N'),
    color=alt.value('grey')
).properties(
    width=750,
    height=450   
)

europe_linechart_final = alt.layer( europe_linechart, europe_line_labels).configure_view(
    strokeWidth=0
).configure_title(
    fontSize=20,
    anchor='middle',
    fontWeight='bold',
).configure_axis(
    labelFontSize = 12,
    titleFontSize = 14,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 14
)

europe_linechart_final

```


## steigender Produktivitätstrend
<br>

:::: {.columns}

::: {.column width="90%"}
```{python}
colors_linechart3 = alt.Scale(
    range=['#ffa600','#ff6361']
)

linechart3 = alt.Chart(df3_selectedlocations).mark_line().encode(
    x=alt.X('TIME:O', title='Year').axis(
        titleAnchor='start',
        labelAngle= -0,
        ),
    y=alt.Y('VALUE').scale(domain=(0.85,1.08)).axis(
        title='GDP per hour worked',
        titleAnchor='end',
        grid= False,
        ),
    strokeWidth=alt.value(3), 
    color=alt.Color('LOCATION', scale=colors_linechart3),
    tooltip=['LOCATION']
)

location_list = df3_selectedlocations['LOCATION'].tolist()

linechart3_labels = alt.Chart(df3_selectedlocations).mark_text(align='left', dx=3).encode(
    alt.X('TIME:O', aggregate='max'),
    alt.Y('VALUE:Q', aggregate={'argmax': 'VALUE'}),
    alt.Text('LOCATION'),
    alt.Color('LOCATION:N', legend=None, scale=alt.Scale(domain=location_list,type='ordinal')), 
).properties(
    width=750,
    height=450,    
)

linechart3_final = alt.layer(linechart3, linechart3_labels, europe_linechart, europe_line_labels).configure_view(
    strokeWidth=0,
).configure_axis(
    labelFontSize = 12,
    titleFontSize = 14,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 14
)

linechart3_final

```

:::

::: {.column width="10%"}
<div style="font-size:20pt">
<text style="color:#ff6361">BIP 1,05</text><br>
<text style="color:#ffa600">BIP 1,02</text>
</div>
:::

::::

## Implikationen

<div>
- **Ausgangslage:** Anzahl der Arbeitsstunden über die letzten Jahre
- **Perspektive der Beschäftigten:** Mindestanzahl an Arbeitsstunden
- **Produktivitätstrends:** stetige Wachstumstendenz
</div>

. . .

<div>
<text style="color:#004aad">**Wie gestalten wir 2024?**</text>
</div>

:::: {.columns}

::: {.column}
<div style="font-size:25pt">
- Nach konjunkturarmen 2020 erholt sich die Wirtschaft und damit auch die Arbeitsproduktivität
- Daten bestätigen Erfolg des aktuellen Arbeitsmodus
</div>

:::

::: {.column}
<div style="font-size:25pt">
- Mitarbeiter stehen im Fokus und sollen weiterhin an das Unternehmen gebunden werden
- 4-Tage-Woche birgt Risiken, aber auch **Chancen**
</div>

::: 

::::

## Handlungsempfehlung

<div style="font-size:25pt">
- Arbeitsmodus innerhalb der 4-Tage-Woche (4x8h à 32h/Woche): **ca. 1.470h im Jahr**
- Studien zeigen womöglich Steigerung der Produktivität trotz geringere Stundenwoche & UK gilt als Vorreiter 
- Umstellung triggert möglicherweise Veränderungen, die weitgehende Folgen haben
- Kompromisse eingehen: Mitarbeiter an Unternehmen binden und verschiedene Konzepte erproben wie z.B. auch 4x10 à 40h/Woche
</div>

. . .

<text style="color:#004aad">**Das Konzept der 4-Tage-Woche gilt es in geeignetem Rahmen und Zeitpunkt zu pilotieren, um Auswirkungen im Unternehmen messbar zu machen**</text>

## {background-color="#004aad"} 

<br><br><br><br><h2 style="text-align:center">Vielen Dank für Ihre Aufmerksamkeit!</h2>
<p style="text-align:center">Für Fragen und Amerkungen gerne jederzeit auf mich zukommen</p>