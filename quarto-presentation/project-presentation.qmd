---
title: "Exkurs Arbeitsproduktivität "
subtitle: "Entscheidungsfindung auf der Grundlage von Unternehmensdaten der Firma X"
author: "Lea Frech"
execute: 
    eval: true
lang: de
format: 
    revealjs:
            embed-resources: true
            toc: true
            toc-title: Agenda
            code-copy: true
            code-line-numbers: true
            scrollable: true
            incremental: true
            slide-number: c
            transition: slide
            theme: default
---

## Firma X - Fakten & Status Quo

Seit 5 Jahren gibt es unseren Firmenstandort in Deutschland.
Hierfür ein paar Eckdaten zur aktuellen Lage:

- Unser Hauptstandort in UK testet aktuell das New-Work-Konzept der 4-Tages-Woche
- Seit Eröffnung des zweiten Standorts in Deutschland, gilt es interne Daten zu beleuchten und - auch vergleichend zu den Kollegen in UK, bestehende Arbeitsmodi zu hinterfragen und ggf. zu testen
- **Ausblick: Wo stehen wir aktuell?**

## Exkurs zum aktuellen Arbeitsmodus
Die Arbeitsproduktivität wird in folgendem an der jährlich Anzahl der gearbeiteten Stunden gemessen. Hierfür stellt auch das Bruttoinlandsprodukt ein wesentlicher KPI dar.

:::: {.columns}

::: {.column width="60%"}
- aktuelle **5-Tages-Arbeitswoche**: 40h Arbeitszeit pro Woche
- ein Geschäftsjahr bringt **52 Arbeitswochen**, also **210 Werktage** exkl. Feiertage und individuellem Urlaubsanspruch
:::

::: {.column width="40%"}
- Vollzeitbeschäftigte kommen damit also auf **ca. 1.680h pro Jahr**

:::

::::

**Zu untersuchen: Status Quo; Implikationen auf den Arbeitsmodus hinsichtlich dem Trend zur 4-Tage Woche**


## Summierte Stundenzahl der letzten Jahre

```{python}
import pandas as pd
import altair as alt

```

```{python}
#Color Scale
colors = alt.Scale(
    range=['#003f5c','#58508d','#bc5090','#ff6361','#ffa600']
)
```

```{python}
# Import Data for Hours Worked
LINK1 = '/Users/Lea/Desktop/dst-projekt/df_selectedlocations.csv'
df_selectedlocations = pd.read_csv(LINK1)
```

:::: {.columns}

::: {.column width="40%"}
**Betrachteter Zeitraum:**<text style="color:#003f5c"> **2019**</text> - <text style="color:#ff6361">**2022**</text><br><br>
Im Verhältnis stehen unsere beiden Firmenstandorte mit der OECD, ein zur Gesamtheit der Länder repräsentativer Zusammenschluss und der EU 

:::

::: {.column width="60%"}

```{python}
#Barchart

barchart1 = alt.Chart(df_selectedlocations).mark_bar().encode(
    x=alt.X('VALUE', scale=alt.Scale(bins=[0,1000,2000,3000,4000,5000,6000,7000])).axis(
        title='Anzahl Stunden',
        titleAnchor='start',
        grid=False,
        labelColor='black',
        tickColor='grey'),
    y=alt.Y('LOCATION').axis(
        title='Standort',
        titleAnchor='middle',
        titleAngle=-90,
        labelAngle= 0,
        grid=False,
        labelColor='black',
        tickColor='black'),
    color=alt.Color('TIME:O', scale=colors),
).properties(
    width=400,
    height=400,
    title=alt.Title(
        "Hours worked",
    )
)

barchart1_labels = alt.Chart(df_selectedlocations).mark_text(baseline='middle', color='black').encode(
    x=alt.X('VALUE'),
    y=alt.Y('LOCATION')  
)



barchart1_final = alt.layer(barchart1,barchart1_labels).configure_view(
    strokeWidth=0
).configure_title(
    fontSize=20,
    anchor='middle',
    fontWeight='bold',
).configure_axis(
    labelFontSize = 11,
    labelFontWeight='bold',
    titleFontSize = 12,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 12
)

barchart1_final

```

:::

::::

---

<text>**2020:**</text><text style="color:#ff6361"> **wirtschaftlicher Tiefpunkt**</text><br>


```{python}

colors_linechart1 = alt.Scale(
    range=['#ffa600','#ff6361','grey','grey']
)

#Linechart
linechart1 = alt.Chart(df_selectedlocations).mark_line().encode(
    x=alt.X('TIME:O', title='Jahr').axis(
        titleAnchor='start',
        labelAngle= -0,
        ),
    y=alt.Y('VALUE').scale(domain=(1000,2000), bins=(1000,1300,1600,1900,2100)).axis(
        title='Anzahl Stunden',
        titleAnchor='end',
        grid= False,
        ),
    strokeWidth=alt.value(4), 
    color=alt.Color('LOCATION', scale=colors_linechart1),
    tooltip=['LOCATION']
)

# Chart 1 - Labels
location_list = df_selectedlocations['LOCATION'].tolist()

linechart_labels = alt.Chart(df_selectedlocations).mark_text(align='left', dx=5, fontSize=14).encode(
    alt.X('TIME:O', aggregate='max'),
    alt.Y('VALUE:Q', aggregate={'argmax': 'VALUE'}),
    alt.Text('LOCATION'),
    alt.Color('LOCATION:N', legend=None, scale=alt.Scale(domain=location_list,type='ordinal')), 
).properties(
    width=800,
    height=500,    
)

# Markers
linechart_points = alt.Chart(df_selectedlocations).mark_point(size=70, filled=True, opacity=1).encode(
    x=alt.X('TIME:O'),
    y=alt.Y('VALUE'),
    color=alt.Color('LOCATION', scale=colors_linechart1),
    tooltip=['LOCATION']
)

#Data Labels 
linechart_datalabels = alt.Chart(df_selectedlocations[(df_selectedlocations['LOCATION'].isin(['United Kingdom', 'Germany'])) & (df_selectedlocations['TIME'] == 2020)]).mark_text(
    align='left',
    dx=5,
    dy=10,
    fontSize=14,
).encode(
    x=alt.X('TIME:O'),
    y=alt.Y('VALUE'),
    text= ('VALUE'),
    color=alt.Color('LOCATION', scale=colors_linechart1)
)



# Chart 1 - Final Viz
linechart1_final = alt.layer(linechart1, linechart_labels,linechart_points, linechart_datalabels).configure_view(
    strokeWidth=0
).configure_title(
    fontSize=25,
    anchor='start',
    fontWeight='bold',
).configure_axis(
    labelFontSize = 11,
    titleFontSize = 12,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 12
)

linechart1_final

```

## 2022: Steigerung auf X Stunden

```{python}
#Linechart
linechart1 = alt.Chart(df_selectedlocations).mark_line().encode(
    x=alt.X('TIME:O', title='Jahr').axis(
        titleAnchor='start',
        labelAngle= -0,
        ),
    y=alt.Y('VALUE').scale(domain=(1000,2000), bins=(1000,1300,1600,1900,2100)).axis(
        title='Anzahl Stunden',
        titleAnchor='end',
        grid= False,
        ),
    strokeWidth=alt.value(4), 
    color=alt.Color('LOCATION', scale=colors_linechart1),
    tooltip=['LOCATION']
)

# Chart 1 - Labels
location_list = df_selectedlocations['LOCATION'].tolist()

linechart_labels = alt.Chart(df_selectedlocations).mark_text(align='left', dx=5, fontSize=14).encode(
    alt.X('TIME:O', aggregate='max'),
    alt.Y('VALUE:Q', aggregate={'argmax': 'VALUE'}),
    alt.Text('LOCATION'),
    alt.Color('LOCATION:N', legend=None, scale=alt.Scale(domain=location_list,type='ordinal')), 
).properties(
    width=800,
    height=500,    
)

# Markers
linechart_points = alt.Chart(df_selectedlocations).mark_point(size=70, filled=True, opacity=1).encode(
    x=alt.X('TIME:O'),
    y=alt.Y('VALUE'),
    color=alt.Color('LOCATION', scale=colors_linechart1),
    tooltip=['LOCATION']
)

#Data Labels 
linechart_datalabels = alt.Chart(df_selectedlocations[(df_selectedlocations['LOCATION'].isin(['United Kingdom', 'Germany'])) & (df_selectedlocations['TIME'] == 2022)]).mark_text(
    align='left',
    dx=-8,
    dy=20,
    fontSize=14,
).encode(
    x=alt.X('TIME:O'),
    y=alt.Y('VALUE'),
    text= ('VALUE'),
    color=alt.Color('LOCATION', scale=colors_linechart1)
)



# Chart 1 - Final Viz
linechart2_final = alt.layer(linechart1, linechart_labels,linechart_points, linechart_datalabels).configure_view(
    strokeWidth=0
).configure_title(
    fontSize=25,
    anchor='start',
    fontWeight='bold',
).configure_axis(
    labelFontSize = 11,
    titleFontSize = 12,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 12
)

linechart2_final

```

## Wie steht es um die Mitarbeitenden?
<text>hier: Untergrenze der benötigten Arbeitsstunden</text>

::::

::: {.columns}

::: {.column width="40%"}
<text style="color:#003f5c">**10,6 Stunden,d.h. weniger als 600 Stunden p.a.**</text><br><br>
<text style="color:#bc5090">**12,6 Stunden, d.h. weniger als 700 Stunden p.a. **</text><br>
<br><text>Auffallend ist hier, dass ....<text>

:::

::: {.column width="60%"}

```{python}
# Import Data for Hours Worked
LINK2 = '/Users/Lea/Desktop/dst-projekt/df2_selectedlocations.csv'
df2_selectedlocations = pd.read_csv(LINK2)
```

```{python}
# Code Scale for Exit Poverty
colors2 = alt.Scale(
    range=['#003f5c','#bc5090']
)

boxplot = alt.Chart(df2_selectedlocations).mark_boxplot(size=50, extent=0.5).encode(
    x=alt.X('SUBJECT').axis(
        title=None,
        labelAngle=0,
        grid=False,
        labelColor='black',
        tickColor='grey'),
    y=alt.Y('VALUE:Q', scale=alt.Scale(bins=[0,2,4,6,8,10,12,14,16,18],domain=(0,20))).axis(
        titleAnchor='start',
        grid=False,
        labelColor='black',
        tickColor='black'),
    color=alt.Color('SUBJECT', scale=colors2, legend=None),
).properties(
    width=450,
    height=400,
    title=alt.Title(
        "Hours needed to exit poverty",
        subtitle="in relation to family status",
    )
)

boxplot_final = alt.layer(boxplot).configure_view(
    strokeWidth=0
).configure_title(
    fontSize=20,
    anchor='middle',
    fontWeight='bold',
).configure_axis(
    labelFontSize = 11,
    labelFontWeight='bold',
    titleFontSize = 12,
    titleFontWeight= 'normal',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 12
)

boxplot_final


```

:::

::::


## Was bedeutet das in unserem Firmenkontext?

Scatterplot!


## Ein Blick in die Zukunft

<text style="color:grey">Entwicklung des Bruttoinlandprodukts</text>

```{python}
#Import Datasets
LINK3 = '/Users/Lea/Desktop/dst-projekt/df3_selectedlocations.csv'
df3_selectedlocations = pd.read_csv(LINK3)

LINK4 = '/Users/Lea/Desktop/dst-projekt/europe_forecast.csv'
europe = pd.read_csv(LINK4)

#Linechart

europe_linechart = alt.Chart(europe).mark_line(strokeDash=[5, 5]).encode(
    x=alt.X('TIME:O', title='Jahr').axis(
        titleAnchor='start',
        labelAngle= -0,
        ),
    y=alt.Y('VALUE').scale(domain=(0.85,1.08)).axis(
        title='GDP per hour worked',
        titleAnchor='end',
        grid= False,
        ),
    strokeWidth=alt.value(3),
    color=alt.value('grey'),
)

europe_list = europe['LOCATION'].tolist()

europe_line_labels = alt.Chart(europe).mark_text(align='left', dx=3).encode(
    alt.X('TIME:O', aggregate='max'),
    alt.Y('VALUE:Q', aggregate={'argmax': 'VALUE'}),
    alt.Text('LOCATION:N'),
    color=alt.value('grey')
).properties(
    width=600,
    height=400   
)

europe_linechart_final = alt.layer( europe_linechart, europe_line_labels).configure_view(
    strokeWidth=0
).configure_title(
    fontSize=20,
    anchor='middle',
    fontWeight='bold',
).configure_axis(
    labelFontSize = 12,
    titleFontSize = 14,
    titleFontWeight= 'bold',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 14
)

europe_linechart_final

```

---

## Ein Blick in die Zukunft: BIP relevanter Standorte


:::: {.columns}

::: {.column width="20%"}

<text style="color:#ff6361">**GDP von X**</text><br>
<text style="color:#ffa600">**GDP von X**</text>

:::

::: {.column width="80%"}

```{python}
colors_linechart3 = alt.Scale(
    range=['#ffa600','#ff6361']
)

linechart3 = alt.Chart(df3_selectedlocations).mark_line().encode(
    x=alt.X('TIME:O', title='Jahr').axis(
        titleAnchor='start',
        labelAngle= -0,
        ),
    y=alt.Y('VALUE').scale(domain=(0.85,1.08)).axis(
        title='GDP per hour worked',
        titleAnchor='end',
        grid= False,
        ),
    strokeWidth=alt.value(3), 
    color=alt.Color('LOCATION', scale=colors_linechart3),
    tooltip=['LOCATION']
)

location_list = df3_selectedlocations['LOCATION'].tolist()

linechart3_labels = alt.Chart(df3_selectedlocations).mark_text(align='left', dx=3).encode(
    alt.X('TIME:O', aggregate='max'),
    alt.Y('VALUE:Q', aggregate={'argmax': 'VALUE'}),
    alt.Text('LOCATION'),
    alt.Color('LOCATION:N', legend=None, scale=alt.Scale(domain=location_list,type='ordinal')), 
).properties(
    width=600,
    height=400,    
)

linechart3_final = alt.layer(linechart3, linechart3_labels, europe_linechart, europe_line_labels).configure_view(
    strokeWidth=0,
).configure_axis(
    labelFontSize = 12,
    titleFontSize = 14,
    titleFontWeight= 'bold',
    titleColor='grey'
).configure_text(
    fontWeight='bold',
    fontSize = 14
)

linechart3_final

```

:::

::::

## Implikationen: ACTION TITLE TBD

Ein auffallendes Muster innerhalb der Daten bildet das Jahr 2020 ab. Die Corona Pandemie hat die Wirtschaft auf sämtlichen Ebenen beeinflusst und somit auch die Arbeitsproduktivität.

:::: {.columns}

::: {.column width="50%"}

:::{.nonincremental}
- Aufschwung seither
- Momentaufnahme: Erholung des konjunkturarmen Jahr 2023
- Es gilt: Mitarbeitende an das Unternehmen binden
- New Work Konzepte werden gefragter und relevanter 
:::

:::

::: {.column width="50%"}

:::{.nonincremental}
- Kompromisse eingehen: 4 Tage Woche sehr starke Maßnahme, um diese Brücke zwischen Arbeitsproduktivität und Work-Life-Balance zu gehen
- usw. Recap der Fakten und analysierten Daten
:::

:::

::::


## Handlungsempfehlung: Pilotierung 4-Tage-Woche

::: {.incremental}
- Hours worked: Ausgangssituation, : Wo stehen wir?, 
- Hours needed to exit poverty repräsentiert die Untergrenze: wichtig sind unsere Mitarbeiter
- Productivity Forecast: Trends und wirtschaftliche Tendenz, Wie verhält sich die Welt?, Wagen wir eine Umstellung des Arbeitsmodus? Was sind Risiken

##### Empfehlung

Auf Basis des Daten und deren Auswertung schlage ich folgendes vor:
Wie kann Vorhaben/Hypothese umgesetzt werden?

:::

## Danke für Ihre Aufmerksamkeit! {.unnumbered .unlisted}

Bild als Hintergrund?
Für Fragen und Amerkungen gerne jederzeit auf mich zukommen